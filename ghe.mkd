# Infrastructure Engineering - Github Best Practises

_This is not concrete and only a suggestion. If this doesn't work for everyone, we can change it!_

## 1: New Projects

The procedure is as follows:

* Every new project should be checked into a **new repository** in Github.
* Create a new **public** repo under the TRI-AD organisation, following the name convention **swp-ie-newproject** _(all lowercase)_
* After creating the repository, add the **DEVOPS** team with **admin** access (via repo settings.)
* Create a **README** which describes the project and include a link to the documentation.

## 2: Common/shared code

In order to remove duplicate code, any shared code should reside in it's own repository. Use the prefix **swp-ie-lib** for libraries, e.g.:

* swp-ie-lib-jenkins (shared jenkins)
* swp-ie-lib-tf (terraform)
* swp-ie-lib-team (custom user scripts/code - if you create something cool and useful, put it here!)

These repos and naming conventions will most likely evolve over time, but lets try to keep things simple, concise and easy to understand.

##3: Branches and general workflow

Remember the **master** branch is **production code**.

If you are working on a feature/bugfix, use the following workflow:

1. Create a local branch
2. Write code and commit regularly
3. Push branch to remote
4. Test and repeat (commit/push)
5. Review: when it's ready, review code with the team (_yet to be decided how - pull request, gitlab??_)
6. Merge with master, using `--squash`
7. Update documentation
8. Delete the remote branch

### 3.01: Create a local branch

If you are working a new project, feature or bugfix - first, create a local branch:

---

`git checkout -b hoge`

---

### 3.02: Write code and commit regularly

You can shorthand commits with:

---

`git commit -am "My config works now"`

---

### 3.03: Push branch to remote

To test your code, push your local branch to Github.

---

`git push -u origin`

---

You can then test your code against your new remote branch.

### 3.04: Test and repeat

When testing, be sure to point your application to your new remote branch.

### 3.05: Code review

**TODO**

Have at least 2 members of the team review your code.

### 3.06: Merge with master

Remember the **master** branch is **production code**.

After a code review, checkout master and merge your local branch. If you have multiple commits, please use `--squash` to squash all your commits into one message.

For example, after working on the `hoge` branch:

---

`git checkout master`

`git merge --squash hoge`

`git commit -a`

---

Edit your commit message, then finally push your code to master:

---

`git push`

---

#### 3.06a Commit messsages
_Please use **concise** and **meaningful** commit messages<sup>1</sup> , and if possible - include a related JIRA link at the end of the commit message. For example:_

* **Good**:"Reduce EBS disk size in workers to 100GB. JIRA: https://jira.tri-ad.global/jira/IE-01"

* **Bad**: "Change disk size"

<sup>1</sup> Major releases and large-scale changes will often require a long commit message - this is fine.

### 3.07: Update documentation

Project development can evolve quickly, but out of date documentation sucks. Lets maintain our documentation so we all have a convenient reference.

### 3.08: Delete the remote branch

After your code has been reviewed, merged and pushed to master - please delete your bugfix/feature remote branch as to not pollute the branch structure. Think of the trees!

---
`git push -u origin --delete hoge`

---

## 4: Remote branches

Whilst `master` is the production branch, it may be necessary to develop on a dedicated `development` branch.

It is also absolutely fine for each team member to have their own personal test branch, but please - do not create multiple test branches and forget about them.

Lets keep it clean!
